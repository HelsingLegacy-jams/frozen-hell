//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxTime;

    public static Entitas.IMatcher<GameEntity> MaxTime {
        get {
            if (_matcherMaxTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxTime = matcher;
            }

            return _matcherMaxTime;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Common.Time.MaxTime maxTime { get { return (Code.Gameplay.Common.Time.MaxTime)GetComponent(GameComponentsLookup.MaxTime); } }
    public float MaxTime { get { return maxTime.Value; } }
    public bool hasMaxTime { get { return HasComponent(GameComponentsLookup.MaxTime); } }

    public GameEntity AddMaxTime(float newValue) {
        var index = GameComponentsLookup.MaxTime;
        var component = (Code.Gameplay.Common.Time.MaxTime)CreateComponent(index, typeof(Code.Gameplay.Common.Time.MaxTime));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMaxTime(float newValue) {
        var index = GameComponentsLookup.MaxTime;
        var component = (Code.Gameplay.Common.Time.MaxTime)CreateComponent(index, typeof(Code.Gameplay.Common.Time.MaxTime));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMaxTime() {
        RemoveComponent(GameComponentsLookup.MaxTime);
        return this;
    }
}
