//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherColdView;

    public static Entitas.IMatcher<GameEntity> ColdView {
        get {
            if (_matcherColdView == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ColdView);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherColdView = matcher;
            }

            return _matcherColdView;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Statuses.ColdView coldView { get { return (Code.Gameplay.Features.Statuses.ColdView)GetComponent(GameComponentsLookup.ColdView); } }
    public Code.Gameplay.Features.Statuses.Behaviours.IStatusView ColdView { get { return coldView.Value; } }
    public bool hasColdView { get { return HasComponent(GameComponentsLookup.ColdView); } }

    public GameEntity AddColdView(Code.Gameplay.Features.Statuses.Behaviours.IStatusView newValue) {
        var index = GameComponentsLookup.ColdView;
        var component = (Code.Gameplay.Features.Statuses.ColdView)CreateComponent(index, typeof(Code.Gameplay.Features.Statuses.ColdView));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceColdView(Code.Gameplay.Features.Statuses.Behaviours.IStatusView newValue) {
        var index = GameComponentsLookup.ColdView;
        var component = (Code.Gameplay.Features.Statuses.ColdView)CreateComponent(index, typeof(Code.Gameplay.Features.Statuses.ColdView));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveColdView() {
        RemoveComponent(GameComponentsLookup.ColdView);
        return this;
    }
}
