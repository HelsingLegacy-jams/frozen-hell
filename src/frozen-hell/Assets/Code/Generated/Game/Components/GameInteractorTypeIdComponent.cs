//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Interactors;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInteractorTypeId;

    public static Entitas.IMatcher<GameEntity> InteractorTypeId {
        get {
            if (_matcherInteractorTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InteractorTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInteractorTypeId = matcher;
            }

            return _matcherInteractorTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Interactors.InteractorTypeIdComponent interactorTypeId { get { return (Code.Gameplay.Features.Interactors.InteractorTypeIdComponent)GetComponent(GameComponentsLookup.InteractorTypeId); } }
    public InteractorTypeId InteractorTypeId { get { return interactorTypeId.Value; } }
    public bool hasInteractorTypeId { get { return HasComponent(GameComponentsLookup.InteractorTypeId); } }

    public GameEntity AddInteractorTypeId(InteractorTypeId newValue) {
        var index = GameComponentsLookup.InteractorTypeId;
        var component = (Code.Gameplay.Features.Interactors.InteractorTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Interactors.InteractorTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInteractorTypeId(InteractorTypeId newValue) {
        var index = GameComponentsLookup.InteractorTypeId;
        var component = (Code.Gameplay.Features.Interactors.InteractorTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Interactors.InteractorTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInteractorTypeId() {
        RemoveComponent(GameComponentsLookup.InteractorTypeId);
        return this;
    }
}
